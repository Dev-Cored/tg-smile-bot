#–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.types import ChatMemberUpdated, Chat

#–ò–º–ø–æ—Ä—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from db import get_session, User, Photo, SentMathce, Group
from generators import generators as gen

#–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router_registration = Router()

#–§—É–Ω–∫—Ü–∏–∏
async def check_chat_type_is_private(chat_type):
    if chat_type == "private":
        return True
    elif chat_type in ("group", "supergroup"):
        return False
    else:
        print(f"–¢–∏–ø —á–∞—Ç–∞: {chat_type}")

async def get_chat_name(chat_id):
    from bot import bot
    chat = await bot.get_chat(chat_id)
    chat_title = chat.title
    return chat_title


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
@router_registration.my_chat_member(F.new_chat_member.status.in_({"member", "administrator"}))
async def on_bot_added(event: ChatMemberUpdated):
    if event.old_chat_member.status in {"kicked", "left"}:
        group_id = event.chat.id
        from bot import bot
        await bot.send_message(
            chat_id=group_id,
            text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø Smile Bot! –ü–æ–º–æ–≥—É –≤–∞—à–µ–º—É –∫–æ–ª–ª–µ–∫—Ç–∏–≤—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏! –ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /join –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
        )
        session = get_session()
        session.add(Group(group_id=group_id, today_emoji=gen.random_emotion()))
        session.commit()

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
@router_registration.chat_member()
async def on_user_leave(message: ChatMemberUpdated):
    if message.new_chat_member.status == "left":
        user_id = message.new_chat_member.user.id
        user_name = message.new_chat_member.user.name
        chat_id = message.chat.id
        session = get_session()

        user = session.query(User).filter(User.user_id == user_id).first()
        if user is not None:
            if user.group_id is not None:
                user.group_id = None
                from bot import bot
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ÄºÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç –∏ –ø—Ä–æ–≥—Ä–∞–º–º—É."
                )
        session.commit()

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@router_registration.message(Command('start'))
async def start(message: types.Message):
    user_id = message.from_user.id
    chat_type = message.chat.type
    chat_id = message.chat.id
    session = get_session()

    is_private = await check_chat_type_is_private(chat_type)
    if is_private:

        user = session.query(User).filter(User.user_id == user_id).first()

        if user is None:
            await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
        else:
            user = session.query(User).filter(User.group_id == user.group_id).first()
            user_group = user.group_id
            if user_group is None:
                await message.answer("–í—ã –Ω–µ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            else:
                group = session.query(Group).filter(Group.group_id == user_group).first()
                await message.answer(f"–≠–º–æ—Ü–∏—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: {gen.emote_to_text(group.today_emoji)}")
    else:
        group = session.query(Group).filter(Group.group_id == chat_id).first()
        if group is not None:
            await message.reply("–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /join –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

@router_registration.message(Command('join'))
async def join(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    user_fullname = message.from_user.full_name
    chat_type = message.chat.type
    chat_id = message.chat.id
    session = get_session()

    is_private = await check_chat_type_is_private(chat_type)
    if is_private:
        user = session.query(User).filter(User.user_id == user_id).first()
        if user is None:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
        else:
            group = user.group_id
            if group is None:
                await message.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /join –≤ —á–∞—Ç–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            else:
                chat_title = await get_chat_name(chat_id)
                chat_emote = session.query(Group).filter(Group.group_id == group).first()
                user.group_id = chat_id
                await message.answer(f"""
–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö –≥—Ä—É–ø–ø—ã <b>{chat_title}</b>!
–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —ç–º–æ—Ü–∏—è <b>{chat_emote}</b>.
""", parse_mode=ParseMode.HTML)

    else:
        user = session.query(User).filter(User.user_id == user_id).first()
        if user is None:
            session.add(User(user_id=user_id, username=username, user_fullname=user_fullname, group_id=chat_id))
            await message.reply(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —á–∞—Ç–∞ {await get_chat_name(chat_id)}.")
        else:
            if user.group_id is None:
                user.group_id = chat_id
                await message.reply(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —á–∞—Ç–∞ {await get_chat_name(chat_id)}.")
            else:
                if user.group_id != chat_id:
                    await message.reply(f"–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö {await get_chat_name(chat_id)}. –ß—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–æ—Ç —á–∞—Ç.")
                elif user.group_id == chat_id:
                    group = session.query(Group).filter(Group.group_id == user.group_id).first()
                    await message.reply(f"–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã. –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {group.today_emoji}")
    session.commit()



